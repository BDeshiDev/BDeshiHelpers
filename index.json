{
  "api/Bdeshi.Helpers.Input.InputButtonSlot.html": {
    "href": "api/Bdeshi.Helpers.Input.InputButtonSlot.html",
    "title": "Class InputButtonSlot | |",
    "keywords": "Class InputButtonSlot Namespace Bdeshi.Helpers.Input You may also assume that this can be safely stored in fields as this is not serialized public class InputButtonSlot Inheritance object InputButtonSlot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InputButtonSlot(string) public InputButtonSlot(string buttonName) Parameters buttonName string Fields ButtonName public string ButtonName Field Value string LastHeld public float LastHeld Field Value float Properties Action public InputActionReference Action { get; } Property Value InputActionReference IsHeld public bool IsHeld { get; } Property Value bool Methods AddCancelledCallback(GameObject, Action) public void AddCancelledCallback(GameObject go, Action a) Parameters go GameObject a Action AddPerformedCallback(GameObject, Action) public void AddPerformedCallback(GameObject go, Action a) Parameters go GameObject a Action Bind(InputActionReference) public void Bind(InputActionReference iar) Parameters iar InputActionReference Cleanup() public void Cleanup() ClearPressedStatus() public void ClearPressedStatus() DebugLog() public void DebugLog() UnBind() public void UnBind() WasHeld(float) public bool WasHeld(float heldWithinThreshold) Parameters heldWithinThreshold float Returns bool WasReleased(float) public bool WasReleased(float heldWithinThreshold) Parameters heldWithinThreshold float Returns bool"
  },
  "api/Bdeshi.Helpers.Input.html": {
    "href": "api/Bdeshi.Helpers.Input.html",
    "title": "Namespace Bdeshi.Helpers.Input | |",
    "keywords": "Namespace Bdeshi.Helpers.Input Classes InputButtonSlot You may also assume that this can be safely stored in fields as this is not serialized"
  },
  "api/Bdeshi.Helpers.Utility.ArrowLiner.html": {
    "href": "api/Bdeshi.Helpers.Utility.ArrowLiner.html",
    "title": "Class ArrowLiner | |",
    "keywords": "Class ArrowLiner Namespace Bdeshi.Helpers.Utility public class ArrowLiner : MonoBehaviour Inheritance object ArrowLiner Fields MainLineWidth public float MainLineWidth Field Value float TipLenMax public float TipLenMax Field Value float TipWidth public float TipWidth Field Value float Properties MainLineEndPoint public Vector3 MainLineEndPoint { get; } Property Value Vector3 MainLiner public LineRenderer MainLiner { get; } Property Value LineRenderer TipLiner public LineRenderer TipLiner { get; } Property Value LineRenderer Methods SetColor(Color) public void SetColor(Color color) Parameters color Color toggleLineRenderers(bool) public void toggleLineRenderers(bool shouldBeOn) Parameters shouldBeOn bool updateArrowEndPoints(Vector3, Vector3) public void updateArrowEndPoints(Vector3 start, Vector3 end) Parameters start Vector3 end Vector3"
  },
  "api/Bdeshi.Helpers.Utility.AutoMonoBehaviourPoolComponent-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.AutoMonoBehaviourPoolComponent-1.html",
    "title": "Class AutoMonoBehaviourPoolComponent<T> | |",
    "keywords": "Class AutoMonoBehaviourPoolComponent<T> Namespace Bdeshi.Helpers.Utility public class AutoMonoBehaviourPoolComponent<T> : MonoBehaviour where T : MonoBehaviour, AutoPoolable<T> Type Parameters T Inheritance object AutoMonoBehaviourPoolComponent<T> Fields Debug public bool Debug Field Value bool InitialCount public int InitialCount Field Value int prefab protected T prefab Field Value T Methods ensurePoolHasAtleast(int) public void ensurePoolHasAtleast(int count) Parameters count int getItem() public T getItem() Returns T returnAll() public void returnAll()"
  },
  "api/Bdeshi.Helpers.Utility.AutoMonobehaviourPool-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.AutoMonobehaviourPool-1.html",
    "title": "Class AutoMonobehaviourPool<T> | |",
    "keywords": "Class AutoMonobehaviourPool<T> Namespace Bdeshi.Helpers.Utility public class AutoMonobehaviourPool<T> where T : MonoBehaviour, AutoPoolable<T> Type Parameters T Inheritance object AutoMonobehaviourPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AutoMonobehaviourPool(T, int, Transform) public AutoMonobehaviourPool(T prefab, int initialCount, Transform spawnParent = null) Parameters prefab T initialCount int spawnParent Transform Fields debug public bool debug Field Value bool prefab protected T prefab Field Value T Methods ensurePoolHasAtleast(int) public void ensurePoolHasAtleast(int count) Parameters count int getItem() public T getItem() Returns T returnAll() public void returnAll()"
  },
  "api/Bdeshi.Helpers.Utility.AutoPoolable-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.AutoPoolable-1.html",
    "title": "Interface AutoPoolable<T> | |",
    "keywords": "Interface AutoPoolable<T> Namespace Bdeshi.Helpers.Utility public interface AutoPoolable<T> Type Parameters T Methods handleReturned() Do cleanup before returning to pool SHOULD NOT INVOKE NormalReturnCallback void handleReturned() initialize() void initialize() Events NormalReturnCallback event Action<T> NormalReturnCallback Event Type Action<T>"
  },
  "api/Bdeshi.Helpers.Utility.ChargableList-1.ChargableListSlot.html": {
    "href": "api/Bdeshi.Helpers.Utility.ChargableList-1.ChargableListSlot.html",
    "title": "Class ChargableList<TItem>.ChargableListSlot | |",
    "keywords": "Class ChargableList<TItem>.ChargableListSlot Namespace Bdeshi.Helpers.Utility [Serializable] public class ChargableList<TItem>.ChargableListSlot Inheritance object ChargableList<TItem>.ChargableListSlot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields chargeTimer public FiniteTimer chargeTimer Field Value FiniteTimer item public TItem item Field Value TItem"
  },
  "api/Bdeshi.Helpers.Utility.ChargableList-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.ChargableList-1.html",
    "title": "Class ChargableList<TItem> | |",
    "keywords": "Class ChargableList<TItem> Namespace Bdeshi.Helpers.Utility [Serializable] public class ChargableList<TItem> : IEnumerable<TItem>, IEnumerable Type Parameters TItem Inheritance object ChargableList<TItem> Implements IEnumerable<TItem> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties chargeLevelCount public int chargeLevelCount { get; } Property Value int getChargeLevels public IEnumerable<ChargableList<TItem>.ChargableListSlot> getChargeLevels { get; } Property Value IEnumerable<ChargableList<TItem>.ChargableListSlot> hasMoreChargeLevels public bool hasMoreChargeLevels { get; } Property Value bool Methods GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TItem> GetEnumerator() Returns IEnumerator<TItem> An enumerator that can be used to iterate through the collection. decreaseCharge(float, Action<TItem>) public void decreaseCharge(float amount, Action<TItem> levelChangeCallback = null) Parameters amount float levelChangeCallback Action<TItem> getChargeCostUpTo(float, out int) public float getChargeCostUpTo(float normalizedChargeLevelThreshold, out int resultingChargeLevel) Parameters normalizedChargeLevelThreshold float resultingChargeLevel int Returns float getCurChargeLevel() public int getCurChargeLevel() Returns int getCurrentItem() public TItem getCurrentItem() Returns TItem getCurrentLevelChargeRatio() public float getCurrentLevelChargeRatio() Returns float getCurrentLevelRemainingAmount() public float getCurrentLevelRemainingAmount() Returns float getFirstChargeCost() public float getFirstChargeCost() Returns float getFullyChargedAmount() Total charge amount over fully charged levels, 2.5 levels charged=. get timer sum of 2 levels public float getFullyChargedAmount() Returns float getFullyChargedLevelCount() How many levels completely charged public int getFullyChargedLevelCount() Returns int getItem(int) public TItem getItem(int index) Parameters index int Returns TItem getItemAndReset() public TItem getItemAndReset() Returns TItem getNormalizedChargedLevelCount() chargeIndex + items[chargeIndex].chargeTimer.Ratio public float getNormalizedChargedLevelCount() Returns float getTotalChargedAmount() public float getTotalChargedAmount() Returns float increaseCharge(float, Func<TItem, TItem, bool>, Action<TItem>) public void increaseCharge(float amount, Func<TItem, TItem, bool> levelIncreasePermissionFunc = null, Action<TItem> levelIncreaseCallback = null) Parameters amount float levelIncreasePermissionFunc Func<TItem, TItem, bool> levelIncreaseCallback Action<TItem> isEmpty() public bool isEmpty() Returns bool resetChargeLevel() public void resetChargeLevel() setAllChargeThresholdsTo(float) set max timer values for ALL charge levels public void setAllChargeThresholdsTo(float to) Parameters to float max timer values for ALL charge levels subtractNormalizedChargeLevel(float) 2.5 => guaranteed drop of 2 levels + lose another half of style gauge from cur charge level as much as possible and the remaining from the charge level from initial drop EX: from S with 25% to C with 75%. public void subtractNormalizedChargeLevel(float normalizedChargeLevelDrop) Parameters normalizedChargeLevelDrop float tryDropLevel(Action<TItem>) public bool tryDropLevel(Action<TItem> levelChangeCallback = null) Parameters levelChangeCallback Action<TItem> Returns bool tryGetNextItem(out TItem) public bool tryGetNextItem(out TItem item) Parameters item TItem Returns bool"
  },
  "api/Bdeshi.Helpers.Utility.EventOnAwake.html": {
    "href": "api/Bdeshi.Helpers.Utility.EventOnAwake.html",
    "title": "Class EventOnAwake | |",
    "keywords": "Class EventOnAwake Namespace Bdeshi.Helpers.Utility public class EventOnAwake : MonoBehaviour Inheritance object EventOnAwake Fields CallInAwake public bool CallInAwake Field Value bool CallInStart public bool CallInStart Field Value bool e public UnityEvent e Field Value UnityEvent"
  },
  "api/Bdeshi.Helpers.Utility.Extensions.Csharp.html": {
    "href": "api/Bdeshi.Helpers.Utility.Extensions.Csharp.html",
    "title": "Class Csharp | |",
    "keywords": "Class Csharp Namespace Bdeshi.Helpers.Utility.Extensions public static class Csharp Inheritance object Csharp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods binarySearchFirstGreater<T>(List<T>, T) public static T binarySearchFirstGreater<T>(this List<T> list, T val) Parameters list List<T> val T Returns T Type Parameters T getRandomIndex<T>(List<T>, int) public static int getRandomIndex<T>(this List<T> list, int maxIndexPlusOne) Parameters list List<T> maxIndexPlusOne int Returns int Type Parameters T getRandomItemExcluding<T>(List<T>, T) public static T getRandomItemExcluding<T>(this List<T> list, T item) Parameters list List<T> item T Returns T Type Parameters T getRandomItem<T>(List<T>) public static T getRandomItem<T>(this List<T> list) Parameters list List<T> Returns T Type Parameters T getRandomItem<T>(List<T>, int) public static T getRandomItem<T>(this List<T> list, int maxIndexPlusOne) Parameters list List<T> maxIndexPlusOne int Returns T Type Parameters T removeAndSwapWithLast<T>(List<T>, int) public static void removeAndSwapWithLast<T>(this List<T> list, int index) Parameters list List<T> index int Type Parameters T removeItemAndSwapWithLast<T>(List<T>, T) public static void removeItemAndSwapWithLast<T>(this List<T> list, T item) where T : class Parameters list List<T> item T Type Parameters T swapToLast<T>(List<T>, int) public static void swapToLast<T>(this List<T> list, int index) Parameters list List<T> index int Type Parameters T"
  },
  "api/Bdeshi.Helpers.Utility.Extensions.Unity.html": {
    "href": "api/Bdeshi.Helpers.Utility.Extensions.Unity.html",
    "title": "Class Unity | |",
    "keywords": "Class Unity Namespace Bdeshi.Helpers.Utility.Extensions public static class Unity Inheritance object Unity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Contains(LayerMask, GameObject) public static bool Contains(this LayerMask mask, GameObject obj) Parameters mask LayerMask obj GameObject Returns bool Contains(LayerMask, RaycastHit) public static bool Contains(this LayerMask mask, RaycastHit hit) Parameters mask LayerMask hit RaycastHit Returns bool Contains(LayerMask, RaycastHit2D) public static bool Contains(this LayerMask mask, RaycastHit2D hit) Parameters mask LayerMask hit RaycastHit2D ASSUME THAT the raycast has HIT SOMETHING Returns bool Contains(LayerMask, int) public static bool Contains(this LayerMask mask, int layer) Parameters mask LayerMask layer int Returns bool Rotate(Vector2, float) public static void Rotate(this Vector2 v, float degrees) Parameters v Vector2 degrees float Rotated(Vector2, float) public static Vector2 Rotated(this Vector2 v, float degrees) Parameters v Vector2 degrees float Returns Vector2 Shuffle<T>(IList<T>) public static void Shuffle<T>(this IList<T> list) Parameters list IList<T> Type Parameters T addAngleOffset(Transform, float) public static void addAngleOffset(this Transform transform, float angleOffset) Parameters transform Transform angleOffset float allignToDir(Rigidbody2D, Vector2) public static void allignToDir(this Rigidbody2D rb2D, Vector2 dir) Parameters rb2D Rigidbody2D dir Vector2 allignToDir2D(Transform, Vector2) public static void allignToDir2D(this Transform transform, Vector2 dir) Parameters transform Transform dir Vector2 allignToDir2D(Transform, Vector2, float) public static void allignToDir2D(this Transform transform, Vector2 dir, float angleOffsetInDegrees) Parameters transform Transform dir Vector2 angleOffsetInDegrees float distanceBetween(Transform, Transform) public static float distanceBetween(this Transform transform, Transform t) Parameters transform Transform t Transform Returns float evaluateCurve(FiniteTimer, AnimationCurve) public static float evaluateCurve(this FiniteTimer timer, AnimationCurve curve) Parameters timer FiniteTimer curve AnimationCurve Returns float exceedsDist(Vector3, float) public static bool exceedsDist(this Vector3 vec, float dist) Parameters vec Vector3 dist float Returns bool get2dAngle(Transform) public static float get2dAngle(this Transform t) Parameters t Transform Returns float get2dAngle(Vector2) public static float get2dAngle(this Vector2 dir) Parameters dir Vector2 Returns float get2dAngle(Vector3) Get 2d angle of this vector public static float get2dAngle(this Vector3 normalizedDir) Parameters normalizedDir Vector3 FOR THE LOVE OF GOD NORMALIZE THIS Returns float getRaycastEndpoint2D(Vector2, Vector2, float, LayerMask, out RaycastHit2D) public static Vector2 getRaycastEndpoint2D(Vector2 origin, Vector2 dir, float length, LayerMask layer, out RaycastHit2D hit) Parameters origin Vector2 dir Vector2 length float layer LayerMask hit RaycastHit2D Returns Vector2 isWithinAngleWith(Vector3, Vector3, float, out float) Imagine a cone with the \"with\" vec as forward, is the \"dir\" within a given angle with \"with\" public static bool isWithinAngleWith(this Vector3 dir, Vector3 with, float halfAngle, out float angle) Parameters dir Vector3 with Vector3 halfAngle float angle float Returns bool lookAlongTopDown(Transform, Vector3) public static void lookAlongTopDown(this Transform transform, Vector3 dir) Parameters transform Transform dir Vector3 multiplyDimensions(Vector2, Vector2) public static Vector2 multiplyDimensions(this Vector2 v, Vector2 other) Parameters v Vector2 other Vector2 Returns Vector2 multiplyDimensions(Vector3, Vector3) public static Vector3 multiplyDimensions(this Vector3 v, Vector3 other) Parameters v Vector3 other Vector3 Returns Vector3 overrideAlpha(Color, float) public static Color overrideAlpha(this Color color, float a) Parameters color Color a float Returns Color raycastFromInsideCollider2D(Vector2, Vector2, float, LayerMask) public static RaycastHit2D raycastFromInsideCollider2D(Vector2 origin, Vector2 direction, float length, LayerMask layer) Parameters origin Vector2 direction Vector2 length float layer LayerMask Returns RaycastHit2D reparentAndReset(Transform, Transform) public static void reparentAndReset(this Transform transform, Transform parent) Parameters transform Transform parent Transform set2dRotation(Transform, float) public static void set2dRotation(this Transform transform, float angle) Parameters transform Transform angle float toTopDown(Vector2) public static Vector3 toTopDown(this Vector2 dir) Parameters dir Vector2 Returns Vector3 withinRange(Vector2, float) public static bool withinRange(this Vector2 range, float value) Parameters range Vector2 value float Returns bool withinRange(Vector3, float, float) public static bool withinRange(this Vector3 vec, float minDist, float maxDist) Parameters vec Vector3 minDist float maxDist float Returns bool"
  },
  "api/Bdeshi.Helpers.Utility.Extensions.html": {
    "href": "api/Bdeshi.Helpers.Utility.Extensions.html",
    "title": "Namespace Bdeshi.Helpers.Utility.Extensions | |",
    "keywords": "Namespace Bdeshi.Helpers.Utility.Extensions Classes Csharp Unity"
  },
  "api/Bdeshi.Helpers.Utility.FiniteTimer.html": {
    "href": "api/Bdeshi.Helpers.Utility.FiniteTimer.html",
    "title": "Struct FiniteTimer | |",
    "keywords": "Struct FiniteTimer Namespace Bdeshi.Helpers.Utility [Serializable] public struct FiniteTimer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods Unity.evaluateCurve(FiniteTimer, AnimationCurve) Constructors FiniteTimer(float, bool) public FiniteTimer(float maxVal = 3, bool completed = false) Parameters maxVal float completed bool FiniteTimer(float, float, bool) public FiniteTimer(float timerStart, float maxVal, bool completed = false) Parameters timerStart float maxVal float completed bool Fields MaxValue public float MaxValue Field Value float Timer public float Timer Field Value float Properties Ratio public float Ratio { get; } Property Value float ReverseRatio public float ReverseRatio { get; } Property Value float isComplete public bool isComplete { get; } Property Value bool Methods clampedUpdateTimer(float) public void clampedUpdateTimer(float delta) Parameters delta float complete() public void complete() exceedsRatio(float) public bool exceedsRatio(float ratioToExceed) Parameters ratioToExceed float Returns bool init(float, float) public void init(float maxval, float startVal = 0) Parameters maxval float startVal float remaingValue() public float remaingValue() Returns float reset() public void reset() reset(float) Reset and set max public void reset(float newMax) Parameters newMax float resetAndKeepExtra() public void resetAndKeepExtra() resetAndSetMax(float) public void resetAndSetMax(float newMax) Parameters newMax float resetAndSetToMax(float) public void resetAndSetToMax(float newMax) Parameters newMax float resetByFractionOfMax(float) public void resetByFractionOfMax(float frac) Parameters frac float safeSubtractTimer(float) public void safeSubtractTimer(float delta) Parameters delta float safeUpdateTimer(float) public void safeUpdateTimer(float delta) Parameters delta float tryCompleteOnce(float) return true if this is completed after updating only if it wasn't completed before public bool tryCompleteOnce(float delta) Parameters delta float Returns bool tryCompleteTimer(float) return true if this is completed before or after updating public bool tryCompleteTimer(float delta) Parameters delta float Returns bool tryCompleteTimer(float, out float) public bool tryCompleteTimer(float delta, out float remainder) Parameters delta float remainder float Returns bool tryEmptyTimer(float, out float) public bool tryEmptyTimer(float delta, out float remainder) Parameters delta float remainder float Returns bool updateTimer(float) public void updateTimer(float delta) Parameters delta float"
  },
  "api/Bdeshi.Helpers.Utility.GenericDictionary-2.html": {
    "href": "api/Bdeshi.Helpers.Utility.GenericDictionary-2.html",
    "title": "Class GenericDictionary<TKey, TValue> | |",
    "keywords": "Class GenericDictionary<TKey, TValue> Namespace Bdeshi.Helpers.Utility Generic Serializable Dictionary for Unity 2020.1 and above. Simply declare your key/value types and you're good to go - zero boilerplate. [Serializable] public class GenericDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializationCallbackReceiver Type Parameters TKey Generic Serializable Dictionary for Unity 2020.1 and above. Simply declare your key/value types and you're good to go - zero boilerplate. TValue Generic Serializable Dictionary for Unity 2020.1 and above. Simply declare your key/value types and you're good to go - zero boilerplate. Inheritance object GenericDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializationCallbackReceiver Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; set; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey key] { get; set; } Parameters key TKey The key of the element to get or set. Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<TKey, TValue> pair) Parameters pair KeyValuePair<TKey, TValue> Exceptions NotSupportedException The ICollection<T> is read-only. Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey key, TValue value) Parameters key TKey The object to use as the key of the element to add. value TValue The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<TKey, TValue> pair) Parameters pair KeyValuePair<TKey, TValue> Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters array KeyValuePair<TKey, TValue>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> An enumerator that can be used to iterate through the collection. OnAfterDeserialize() public void OnAfterDeserialize() OnBeforeSerialize() public void OnBeforeSerialize() Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<TKey, TValue> pair) Parameters pair KeyValuePair<TKey, TValue> Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue value) Parameters key TKey The key whose value to get. value TValue When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null."
  },
  "api/Bdeshi.Helpers.Utility.MonoBehaviourLazySingleton-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.MonoBehaviourLazySingleton-1.html",
    "title": "Class MonoBehaviourLazySingleton<T> | |",
    "keywords": "Class MonoBehaviourLazySingleton<T> Namespace Bdeshi.Helpers.Utility public class MonoBehaviourLazySingleton<T> : MonoBehaviour where T : MonoBehaviourLazySingleton<T> Type Parameters T Inheritance object MonoBehaviourLazySingleton<T> Properties Instance public static T Instance { get; } Property Value T Methods Awake() protected virtual void Awake() Initialize() Initialize is called on awake only if this is the first instance protected virtual void Initialize() PlayModeEnterCleanup() public static void PlayModeEnterCleanup() PlayModeEnterCleanupInternal() protected virtual void PlayModeEnterCleanupInternal() PlayModeExitCleanup() public static void PlayModeExitCleanup()"
  },
  "api/Bdeshi.Helpers.Utility.MonoBehaviourSingletonPersistent-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.MonoBehaviourSingletonPersistent-1.html",
    "title": "Class MonoBehaviourSingletonPersistent<T> | |",
    "keywords": "Class MonoBehaviourSingletonPersistent<T> Namespace Bdeshi.Helpers.Utility public abstract class MonoBehaviourSingletonPersistent<T> : MonoBehaviour where T : Component Type Parameters T Inheritance object MonoBehaviourSingletonPersistent<T> Fields _willGetDestroyed protected bool _willGetDestroyed Field Value bool Properties Instance public static T Instance { get; } Property Value T Methods Awake() protected virtual void Awake() Initialize() Initialize is called on awake only if this is the first instance protected abstract void Initialize()"
  },
  "api/Bdeshi.Helpers.Utility.PathComponent.html": {
    "href": "api/Bdeshi.Helpers.Utility.PathComponent.html",
    "title": "Class PathComponent | |",
    "keywords": "Class PathComponent Namespace Bdeshi.Helpers.Utility public class PathComponent : MonoBehaviour Inheritance object PathComponent Fields GizmoColor public Color GizmoColor Field Value Color Path public Vector3[] Path Field Value Vector3[]"
  },
  "api/Bdeshi.Helpers.Utility.Reparenter.html": {
    "href": "api/Bdeshi.Helpers.Utility.Reparenter.html",
    "title": "Class Reparenter | |",
    "keywords": "Class Reparenter Namespace Bdeshi.Helpers.Utility public class Reparenter : MonoBehaviour Inheritance object Reparenter Fields newParent public Transform newParent Field Value Transform"
  },
  "api/Bdeshi.Helpers.Utility.SafeAction-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.SafeAction-1.html",
    "title": "Class SafeAction<T> | |",
    "keywords": "Class SafeAction<T> Namespace Bdeshi.Helpers.Utility If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. public class SafeAction<T> Type Parameters T If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. Inheritance object SafeAction<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeAction(GameObject, Action<T>) public SafeAction(GameObject go, Action<T> action) Parameters go GameObject action Action<T> Fields Action public Action<T> Action Field Value Action<T> Go public GameObject Go Field Value GameObject"
  },
  "api/Bdeshi.Helpers.Utility.SafeAction-2.html": {
    "href": "api/Bdeshi.Helpers.Utility.SafeAction-2.html",
    "title": "Class SafeAction<T1, T2> | |",
    "keywords": "Class SafeAction<T1, T2> Namespace Bdeshi.Helpers.Utility If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. public class SafeAction<T1, T2> Type Parameters T1 If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. T2 If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. Inheritance object SafeAction<T1, T2> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeAction(GameObject, Action<T1, T2>) public SafeAction(GameObject go, Action<T1, T2> action) Parameters go GameObject action Action<T1, T2> Fields Action public Action<T1, T2> Action Field Value Action<T1, T2> Go public GameObject Go Field Value GameObject"
  },
  "api/Bdeshi.Helpers.Utility.SafeAction.html": {
    "href": "api/Bdeshi.Helpers.Utility.SafeAction.html",
    "title": "Class SafeAction | |",
    "keywords": "Class SafeAction Namespace Bdeshi.Helpers.Utility If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. public class SafeAction Inheritance object SafeAction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeAction(GameObject, Action) public SafeAction(GameObject go, Action action) Parameters go GameObject action Action Fields Action public Action Action Field Value Action Go public GameObject Go Field Value GameObject"
  },
  "api/Bdeshi.Helpers.Utility.SafeEvent-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.SafeEvent-1.html",
    "title": "Class SafeEvent<TContext> | |",
    "keywords": "Class SafeEvent<TContext> Namespace Bdeshi.Helpers.Utility public class SafeEvent<TContext> Type Parameters TContext Inheritance object SafeEvent<TContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Invoke(TContext) public void Invoke(TContext ctx) Parameters ctx TContext add(GameObject, Action<TContext>) public void add(GameObject go, Action<TContext> a) Parameters go GameObject a Action<TContext> clear() public void clear() debugLog() public void debugLog()"
  },
  "api/Bdeshi.Helpers.Utility.SafeEvent-2.html": {
    "href": "api/Bdeshi.Helpers.Utility.SafeEvent-2.html",
    "title": "Class SafeEvent<T1, T2> | |",
    "keywords": "Class SafeEvent<T1, T2> Namespace Bdeshi.Helpers.Utility public class SafeEvent<T1, T2> Type Parameters T1 T2 Inheritance object SafeEvent<T1, T2> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Invoke(T1, T2) public void Invoke(T1 ctx1, T2 ctx2) Parameters ctx1 T1 ctx2 T2 add(GameObject, Action<T1, T2>) public void add(GameObject go, Action<T1, T2> a) Parameters go GameObject a Action<T1, T2> clear() public void clear()"
  },
  "api/Bdeshi.Helpers.Utility.SafeEvent.html": {
    "href": "api/Bdeshi.Helpers.Utility.SafeEvent.html",
    "title": "Class SafeEvent | |",
    "keywords": "Class SafeEvent Namespace Bdeshi.Helpers.Utility public class SafeEvent Inheritance object SafeEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Invoke() public void Invoke() add(GameObject, Action) public void add(GameObject go, Action a) Parameters go GameObject a Action clear() public void clear()"
  },
  "api/Bdeshi.Helpers.Utility.SafeFiniteTimer.html": {
    "href": "api/Bdeshi.Helpers.Utility.SafeFiniteTimer.html",
    "title": "Class SafeFiniteTimer | |",
    "keywords": "Class SafeFiniteTimer Namespace Bdeshi.Helpers.Utility [Serializable] public class SafeFiniteTimer Inheritance object SafeFiniteTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SafeFiniteTimer(float, bool) public SafeFiniteTimer(float maxVal = 3, bool completed = false) Parameters maxVal float completed bool SafeFiniteTimer(float, float, bool) public SafeFiniteTimer(float timerStart, float maxVal, bool completed = false) Parameters timerStart float maxVal float completed bool Fields MaxValue public float MaxValue Field Value float Timer public float Timer Field Value float Properties Ratio public float Ratio { get; } Property Value float ReverseRatio public float ReverseRatio { get; } Property Value float isComplete public bool isComplete { get; } Property Value bool Methods clampedUpdateTimer(float) public void clampedUpdateTimer(float delta) Parameters delta float complete() public void complete() exceedsRatio(float) public bool exceedsRatio(float ratioToExceed) Parameters ratioToExceed float Returns bool init(float, float) public void init(float maxval, float startVal = 0) Parameters maxval float startVal float reset() public void reset() reset(float) Reset and set max public void reset(float newMax) Parameters newMax float resetAndKeepExtra() public void resetAndKeepExtra() resetByFractionOfMax(float) public void resetByFractionOfMax(float frac) Parameters frac float safeUpdateTimer(float) public void safeUpdateTimer(float delta) Parameters delta float tryCompleteTimer(float) return true if this is completed before or after updating public bool tryCompleteTimer(float delta) Parameters delta float Returns bool tryCompleteTimer(float, out float) public bool tryCompleteTimer(float delta, out float remainder) Parameters delta float remainder float Returns bool tryEmptyTimer(float, out float) public bool tryEmptyTimer(float delta, out float remainder) Parameters delta float remainder float Returns bool updateTimer(float) public void updateTimer(float delta) Parameters delta float"
  },
  "api/Bdeshi.Helpers.Utility.SerializableStack-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.SerializableStack-1.html",
    "title": "Class SerializableStack<T> | |",
    "keywords": "Class SerializableStack<T> Namespace Bdeshi.Helpers.Utility public class SerializableStack<T> Type Parameters T Inheritance object SerializableStack<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsEmpty public bool IsEmpty { get; } Property Value bool Methods Contains(T) public bool Contains(T item) Parameters item T Returns bool Peek() public T Peek() Returns T Pop() public T Pop() Returns T Push(T) public void Push(T item) Parameters item T"
  },
  "api/Bdeshi.Helpers.Utility.SimpleManualMonoBehaviourPool-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.SimpleManualMonoBehaviourPool-1.html",
    "title": "Class SimpleManualMonoBehaviourPool<T> | |",
    "keywords": "Class SimpleManualMonoBehaviourPool<T> Namespace Bdeshi.Helpers.Utility Simple pool with normal instantiation automated. public class SimpleManualMonoBehaviourPool<T> where T : MonoBehaviour Type Parameters T Inheritance object SimpleManualMonoBehaviourPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleManualMonoBehaviourPool(T, int, Transform) public SimpleManualMonoBehaviourPool(T prefab, int initialCount, Transform spawnParent = null) Parameters prefab T initialCount int spawnParent Transform Fields SpawnParent public Transform SpawnParent Field Value Transform _prefab protected T _prefab Field Value T Methods EnsurePoolHasAtleast(int) public void EnsurePoolHasAtleast(int count) Parameters count int EnsureSpawnListCount(List<T>, int) Will fill/trim a list to match a desired count using pool excess is returned to pool additional items are fetched from pool public void EnsureSpawnListCount(List<T> spawnedList, int desiredSpawnCount) Parameters spawnedList List<T> desiredSpawnCount int GetItem() public T GetItem() Returns T ReturnItem(T) public void ReturnItem(T item) Parameters item T"
  },
  "api/Bdeshi.Helpers.Utility.SimpleManualMonoBehaviourPoolComponent-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.SimpleManualMonoBehaviourPoolComponent-1.html",
    "title": "Class SimpleManualMonoBehaviourPoolComponent<T> | |",
    "keywords": "Class SimpleManualMonoBehaviourPoolComponent<T> Namespace Bdeshi.Helpers.Utility Simple pool with normal instantiation automated. public class SimpleManualMonoBehaviourPoolComponent<T> : MonoBehaviour where T : MonoBehaviour Type Parameters T Inheritance object SimpleManualMonoBehaviourPoolComponent<T> Fields InitialCount public int InitialCount Field Value int _prefab protected T _prefab Field Value T Methods EnsurePoolHasAtleast(int) public void EnsurePoolHasAtleast(int count) Parameters count int GetItem() public T GetItem() Returns T ReturnItem(T) public void ReturnItem(T item) Parameters item T"
  },
  "api/Bdeshi.Helpers.Utility.SimpleManualPool-1.html": {
    "href": "api/Bdeshi.Helpers.Utility.SimpleManualPool-1.html",
    "title": "Class SimpleManualPool<T> | |",
    "keywords": "Class SimpleManualPool<T> Namespace Bdeshi.Helpers.Utility manual pool for POCOs Creation is done through the Func public class SimpleManualPool<T> Type Parameters T Inheritance object SimpleManualPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimpleManualPool(Func<T>) public SimpleManualPool(Func<T> creationMethod) Parameters creationMethod Func<T> Methods EnsurePoolHasAtleast(int) public void EnsurePoolHasAtleast(int count) Parameters count int GetItem() public T GetItem() Returns T ReturnItem(T) public void ReturnItem(T item) Parameters item T"
  },
  "api/Bdeshi.Helpers.Utility.SingleUnityLayer.html": {
    "href": "api/Bdeshi.Helpers.Utility.SingleUnityLayer.html",
    "title": "Class SingleUnityLayer | |",
    "keywords": "Class SingleUnityLayer Namespace Bdeshi.Helpers.Utility [Serializable] public class SingleUnityLayer Inheritance object SingleUnityLayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LayerIndex public int LayerIndex { get; } Property Value int Mask public int Mask { get; } Property Value int Methods Set(int) public void Set(int _layerIndex) Parameters _layerIndex int"
  },
  "api/Bdeshi.Helpers.Utility.html": {
    "href": "api/Bdeshi.Helpers.Utility.html",
    "title": "Namespace Bdeshi.Helpers.Utility | |",
    "keywords": "Namespace Bdeshi.Helpers.Utility Classes ArrowLiner AutoMonoBehaviourPoolComponent<T> AutoMonobehaviourPool<T> ChargableList<TItem> ChargableList<TItem>.ChargableListSlot EventOnAwake GenericDictionary<TKey, TValue> Generic Serializable Dictionary for Unity 2020.1 and above. Simply declare your key/value types and you're good to go - zero boilerplate. MonoBehaviourLazySingleton<T> MonoBehaviourSingletonPersistent<T> PathComponent Reparenter SafeAction If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. SafeAction<T> If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. SafeAction<T1, T2> If Go == null, action is not executed and this is removed from whatever list it belongs to Safe to use lambdas too. SafeEvent SafeEvent<TContext> SafeEvent<T1, T2> SafeFiniteTimer SerializableStack<T> SimpleManualMonoBehaviourPoolComponent<T> Simple pool with normal instantiation automated. SimpleManualMonoBehaviourPool<T> Simple pool with normal instantiation automated. SimpleManualPool<T> manual pool for POCOs Creation is done through the Func SingleUnityLayer Structs FiniteTimer Interfaces AutoPoolable<T>"
  },
  "api/Bdeshi.Helpers.levelloading.ManagerLoadEnsurer.html": {
    "href": "api/Bdeshi.Helpers.levelloading.ManagerLoadEnsurer.html",
    "title": "Class ManagerLoadEnsurer | |",
    "keywords": "Class ManagerLoadEnsurer Namespace Bdeshi.Helpers.levelloading public class ManagerLoadEnsurer : MonoBehaviour Inheritance object ManagerLoadEnsurer Fields LoadedManager public static bool LoadedManager Field Value bool ManagerSceneName public string ManagerSceneName Field Value string Methods EnsureLoad() public void EnsureLoad()"
  },
  "api/Bdeshi.Helpers.levelloading.html": {
    "href": "api/Bdeshi.Helpers.levelloading.html",
    "title": "Namespace Bdeshi.Helpers.levelloading | |",
    "keywords": "Namespace Bdeshi.Helpers.levelloading Classes ManagerLoadEnsurer"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2023 Md Maruf Billa Opu Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "| |",
    "keywords": "Contains misc. helper classes for singletons, pooling, safe events, extensions etc. Install via Git URL You can also use the \"Install from Git URL\" option from Unity Package Manager to install the package. https://github.com/BDeshiDev/BDeshiHelpers.git#upm"
  }
}